{"data":{"site":{"siteMetadata":{"title":"Intelligible Babble","author":"Leland Richardson"}},"markdownRemark":{"id":"aad0edf9-2143-5bee-a457-cabff7b4a931","excerpt":"Recently I wrote a blog:  Functional JavaScript, Part 3: .apply(), .call(), and the arguments object Taylor Smith ended up making a comment…","html":"<p>Recently I wrote a blog: <a href=\"/functional-javascript-part-3-apply-call-and-the-arguments-object/\">Functional JavaScript, Part 3: .apply(), .call(), and the arguments object</a></p>\n<p>Taylor Smith ended up making a comment about a piece of code from my tutorial that could be simplified (or shortened, at least):</p>\n<p>Taylor said:</p>\n<blockquote>\n<p>You can simplify this</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">demethodize</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>slice<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> fn<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>to this</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">demethodize</span> <span class=\"token operator\">=</span> Function<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>Function<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</blockquote>\n<p>This is quite the clever piece of code. And today Louis Lazaris asked for someone to explain it in more detail:</p>\n<h2>How it works</h2>\n<hr>\n<p>The original function that I wrote, is a function that accepts a single function as an argument. In return, it gives back a new function which is like the old one, except the arguments are “shifted” to the right by one, and the first argument is now what the old function used to expect as the <code class=\"language-text\">this</code> context variable.</p>\n<p>To give an example, let’s use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code class=\"language-text\">String.prototype.split</code></a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token string\">\"abc,def,g\"</span><span class=\"token punctuation\">;</span>\ntest<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//=> [\"abc\",\"def\",\"g\"]</span>\n\n<span class=\"token keyword\">var</span> split <span class=\"token operator\">=</span> <span class=\"token function\">demethodize</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">split</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">,</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//=> [\"abc\",\"def\",\"g\"]</span></code></pre></div>\n<p>Both my version and taylor’s version produce the same results, but why?</p>\n<p>Let’s look at all of the moving parts. Taylor’s function makes use of two prototype methods: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code class=\"language-text\">Function.prototype.bind</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code class=\"language-text\">Function.prototype.call</code></a>.</p>\n<p>The function signatures for these methods look kinda like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Function<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">call</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nFunction<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">bind</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So firstly, we are calling <code class=\"language-text\">Function.prototype.bind</code> on <em>itself</em>. Since <code class=\"language-text\">Function.prototype.bind</code> is a function, it has itself as one of it’s prototype methods. Kind of crazy, I know… but what does that mean?</p>\n<p>That means that whatever we pass into the second <code class=\"language-text\">.bind</code>, is going to become the <code class=\"language-text\">thisArg</code> in the first one.</p>\n<p>Thus, we could sort of decompose</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">demethodize</span> <span class=\"token operator\">=</span> Function<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>Function<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>is the same as…</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">demethodize</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Function<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note: this is really the clever part. When you run .bind on Function.call, it’s similar to shifting the arguments by 1…</p>\n<p>is the same as…</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">demethodize</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> fn<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is written using the <code class=\"language-text\">...</code> notation of ECMAScript 6, since it makes it easier to understand. In reality, this last block of code is the same as:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">demethodize</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>slice<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> fn<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Which you can see is pretty close to my original function.</p>\n<p>Pretty cool stuff!</p>","fields":{"readingTime":{"text":"3 min read"}},"frontmatter":{"title":"Clever way to \"demethodize\" Native JS Methods","date":"June 10, 2014"}}},"pageContext":{"slug":"/clever-way-to-demethodize-native-js-methods/","previous":{"fields":{"slug":"/functional-javascript-part-4-function-currying/"},"frontmatter":{"title":"Functional JavaScript, Part 4: Function Currying"}},"next":{"fields":{"slug":"/custom-lucene-tokenizer-for-tech-keywords/"},"frontmatter":{"title":"Custom Lucene Tokenizer for Tech Keywords"}}}}