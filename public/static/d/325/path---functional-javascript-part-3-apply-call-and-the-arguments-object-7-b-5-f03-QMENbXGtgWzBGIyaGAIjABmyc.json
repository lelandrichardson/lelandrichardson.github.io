{"data":{"site":{"siteMetadata":{"title":"Intelligible Babble","author":"Leland Richardson"}},"markdownRemark":{"id":"9d945f3e-a033-555e-be90-bf011be25e86","excerpt":"We are on a quest to bend and twist JavaScript in such a way that we can do some real functional programming. In order to do that…","html":"<p>We are on a quest to bend and twist JavaScript in such a way that we can do some real functional programming. In order to do that, understanding function invocation and the Function prototype in detail is very much a pre-requisite.</p>\n<p>This is the <strong>third post</strong> of a (to be determined)-post series on Functional Programming in Javascript. If you are just joining in, you may want to jump back to previous posts:</p>\n<ul>\n<li><a href=\"/functional-javascript-part-1-introduction\">Part 1: Introduction</a></li>\n<li><a href=\"/functional-javascript-part-2-what-makes-a-language-functional\">Part 2: What makes a language “functional”</a></li>\n</ul>\n<p>Now that you’ve successfully read or ignored the above links, we are ready to move on!</p>\n<h3>The <code class=\"language-text\">Function</code> prototype</h3>\n<p>If we crack open our favorite browser + JavaScript console, let’s take a look at the <code class=\"language-text\">Function.prototype</code> object’s properties:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>Function<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//=> [\"length\", \"name\", \"arguments\", \"caller\", \"constructor\", \"bind\", \"toString\", \"call\", \"apply\"]</span></code></pre></div>\n<p>The output here might vary depending on the browser and version of JavaScript you are using. (In my case, I am using Chrome 33).</p>\n<p>We see several properties that might be of interest to us. For the purposes of this post, I’d like to talk about the following:</p>\n<ul>\n<li>Function.prototype.length</li>\n<li>Function.prototype.call</li>\n<li>Function.prototype.apply</li>\n</ul>\n<p>The first is a property, while the other two are methods. In addition to these, I’d also like to discuss the special variable <code class=\"language-text\">arguments</code>, which is <em>slightly different</em> than <code class=\"language-text\">Function.prototype.arguments</code> (now <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\">deprecated</a>).</p>\n<p>To get started, I am going to define a “tester” function which will help us understand what is going on</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">tester</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n    a<span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">,</span>\n    b<span class=\"token punctuation\">:</span> b<span class=\"token punctuation\">,</span>\n    c<span class=\"token punctuation\">:</span> c\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This function simply logs the value of the parameters passed into it, along with the value of it’s “context variable”, <code class=\"language-text\">this</code>.</p>\n<p>Now, let’s try a couple of things out:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">tester</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//=> {this: Window, a: \"a\", b: (undefined), c: (undefined)}</span>\n\n<span class=\"token function\">tester</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"is\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cool\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//=> {this: Window, a: \"this\", b: \"is\", c: \"cool\"}</span></code></pre></div>\n<p>We notice that if the second and third parameters are left blank, they show up as <code class=\"language-text\">undefined</code>. Additionally, we notice that the default “context” of a function is the global <code class=\"language-text\">window</code> object.</p>\n<h3>Using <code class=\"language-text\">Function.prototype.call</code></h3>\n<p>The <code class=\"language-text\">.call</code> method of a function invokes the function with the context variable <code class=\"language-text\">this</code> set to the first argument passed in, and then each additional argument is passed into the function.</p>\n<p>Syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">fn<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Thus, the following two lines are effectively equivalent:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">tester</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"is\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cool\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntester<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> <span class=\"token string\">\"this\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"is\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cool\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Of course, we can pass whatever we want in though:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">tester<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this?\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"is\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"even\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cooler\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//=> {this: \"this?\", a: \"is\", b: \"even\", c: \"cooler\"}</span></code></pre></div>\n<p>The main utility of this method is to set the value of <code class=\"language-text\">this</code> in the function you are calling.</p>\n<h3>Using <code class=\"language-text\">Function.prototype.apply</code></h3>\n<p>The <code class=\"language-text\">.apply</code> method of a function has a bit more utility than <code class=\"language-text\">.call</code>. Similar to <code class=\"language-text\">.call</code>, <code class=\"language-text\">.apply</code> invokes the function with the context variable <code class=\"language-text\">this</code> set to the first argument passed in. The second and final argument, however, will end up being the arguments of the function provided as an array (or an array-like object);</p>\n<p>Syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">fun<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>argsArray<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Thus, the folllowing three lines are all equivalent:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">tester</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"is\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cool\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntester<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> <span class=\"token string\">\"this\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"is\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cool\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntester<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"this\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"is\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cool\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Being able to specify the arguments list as an array is often times very useful (as we will find out).</p>\n<p>For example, the <code class=\"language-text\">Math.max</code> function is a variadic function (a funciton which expects any number of arguments).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//=> 3</span>\n\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//=> 2</span></code></pre></div>\n<p>So, if I have an array of numbers and I need to find the maximum with the <code class=\"language-text\">Math.max</code> function, how do I go about doing that in one line?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nMath<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//=> 8</span></code></pre></div>\n<p>The <code class=\"language-text\">.apply</code> method really starts to show it’s importance when coupled with the special <code class=\"language-text\">arguments</code> variable:</p>\n<h3>The <code class=\"language-text\">arguments</code> object</h3>\n<p>Every function expression has a special local variable accessible inside it’s scope: <code class=\"language-text\">arguments</code>. To investigate it’s properties, let’s create another tester function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">tester</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>Note: We must use <code class=\"language-text\">Object.getOwnPropertyNames</code> in situations like this, because <code class=\"language-text\">arguments</code> has some properties that are not marked as enumerable, so they will not show up if we just do something like <code class=\"language-text\">console.log(arguments)</code>.</p>\n</blockquote>\n<p>Now we test by invoking the tester function a couple of times:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">tester</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//=> [\"0\", \"1\", \"2\", \"length\", \"callee\"]</span>\n\ntester<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//=> [\"0\", \"length\", \"callee\"]</span></code></pre></div>\n<p>The <code class=\"language-text\">arguments</code> variable has properties corresponding to each parameter passed into the function, as well as a <code class=\"language-text\">.length</code> and a <code class=\"language-text\">.callee</code> property.</p>\n<p>The <code class=\"language-text\">.callee</code> property provides a reference to the function which invoked the current function, but is not fully supported in all browsers. For the moment, we will be ignoring it.</p>\n<p>Let’s redefine our tester function to be a little more informative:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">tester</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n    arguments<span class=\"token punctuation\">:</span> arguments<span class=\"token punctuation\">,</span>\n    length<span class=\"token punctuation\">:</span> arguments<span class=\"token punctuation\">.</span>length\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ntester<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//=> { this: null, arguments: { 0: \"a\", 1: \"b\", 2: \"c\" }, length: 3 }</span></code></pre></div>\n<h3><code class=\"language-text\">arguments</code>: Object or Array?</h3>\n<p>As we can see, <code class=\"language-text\">arguments</code> is not quite an array, but it sort of looks like one. In many cases, though, we will want to manipulate it as if it was an array. To turn <code class=\"language-text\">arguments</code> into an array, this is a nice little shortcut:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>slice<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">example</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">example</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//=> { 0: \"a\", 1: \"b\", 2: \"c\" }</span>\n<span class=\"token comment\">//=> [\"a\", \"b\", \"c\"]</span></code></pre></div>\n<p>Here we are taking advantage of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\">Array.prototype.slice method</a> in order to turn the array-like-object into an array. Because of this, the <code class=\"language-text\">arguments</code> object can end up being incredibly useful when in conjunction with <code class=\"language-text\">.apply</code>.</p>\n<h2>Some Useful Examples</h2>\n<hr>\n<h3>Log Wrapper</h3>\n<p>We built a <code class=\"language-text\">logWrapper</code> function in the last post, but it would only work properly for unary functions:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// old version</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">logWrapper</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'calling \"'</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">'\" with argument \"'</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Of course, with what we know now we can create a <code class=\"language-text\">logWrapper</code> function that works for <em>any</em> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// new version</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">logWrapper</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'calling \"'</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>By calling</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">f<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We are ensuring that the function <code class=\"language-text\">f</code> is being invoked with the <em>exact same</em> context as it would have before. Thus, this logging function is completely unobtrusive if we want to replace some function in our code with the “wrapped” version.</p>\n<h3>Turn native prototype methods into utility functions</h3>\n<p>Browsers come with lot’s of useful methods right out of the box that we might want to “borrow” and use in our own code. Methods typically operate on the <code class=\"language-text\">this</code> variable as the “data”. In functional programming, we won’t have the <code class=\"language-text\">this</code> variable, but we may want to use the function anyway!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">demethodize</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>slice<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> fn<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Some other examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// String.prototype</span>\n<span class=\"token keyword\">var</span> split <span class=\"token operator\">=</span> <span class=\"token function\">demethodize</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> slice <span class=\"token operator\">=</span> <span class=\"token function\">demethodize</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>slice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> indexOfStr <span class=\"token operator\">=</span> <span class=\"token function\">demethodize</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>indexOf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> toLowerCase <span class=\"token operator\">=</span> <span class=\"token function\">demethodize</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toLowerCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Array.prototype</span>\n<span class=\"token keyword\">var</span> join <span class=\"token operator\">=</span> <span class=\"token function\">demethodize</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> forEach <span class=\"token operator\">=</span> <span class=\"token function\">demethodize</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>forEach<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> map <span class=\"token operator\">=</span> <span class=\"token function\">demethodize</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And of course, many more. To show how these would work:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"abc,def\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//=> [\"abc\",\"def\"]</span>\n\n<span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc,def\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//=> [\"abc\",\"def\"]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//=> \"a b c\"</span>\n\n<span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => \"a b c\"</span></code></pre></div>\n<blockquote>\n<p><strong>Aside:</strong><br>As I will show later, it is actually better to use define this demethodize function in such a way that the arguments are flipped.</p>\n</blockquote>\n<blockquote>\n<p>In the case of functional programming, you generally want to have the “data” or “input data” argument to be the right-most argument of the function. Methods usually have the <code class=\"language-text\">this</code> variable bound to the “data”. For instance, a <code class=\"language-text\">String.prototype</code> method is usually <em>operating on</em> the actual string (ie, the “data”). The same goes for Array methods.</p>\n</blockquote>\n<blockquote>\n<p>The reason for this may not be immediately clear, but it is once you get used to currying and combining functions to get meaningful logic. This is precisely the issue that I brought up in the <a href=\"/functional-javascript-part-1-introduction/\">Introduction</a> post about <a href=\"http://underscorejs.org/\">Underscore.js</a> and will go into more detail about in future posts. Almost every function in the Underscore.js library has the “data” argument as the left-most argument. This ends up leading to very little re-use, and code that is difficult to read and/or reason about. :sadface:</p>\n</blockquote>\n<h3>Manipulate Argument Order</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// shift the parameters of a function by one</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">ignoreFirstArg</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>slice<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// reverse the order that a function accepts arguments</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">reverseArgs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Function Composition</h3>\n<p>Function Composition is incredibly important in the world of functional programming. The general idea is to create smaller, testable functions that are “units of logic”, which can then be combined into larger “machines” which do much more complex work.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// compose(f1, f2, f3..., fn)(args) == f1(f2(f3(...(fn(args...)))))</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">compose</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* f1, f2, ..., fn */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> fns <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">,</span>\n    length <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// we need to go in reverse order</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      arguments <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>fns<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// sequence(f1, f2, f3..., fn)(args...) == fn(...(f3(f2(f1(args...)))))</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sequence</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* f1, f2, ..., fn */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> fns <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">,</span>\n    length <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// we need to go in normal order here</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      arguments <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>fns<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// abs(x) = Sqrt(x^2)</span>\n<span class=\"token keyword\">var</span> abs <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n  sqrt<span class=\"token punctuation\">,</span>\n  square\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<p>That’s it for today, but the next post takes a deep dive on function currying.</p>\n<h3>Up Next -> <a href=\"/functional-javascript-part-4-function-currying/\">Part 4, Function Currying</a></h3>\n<h3>More From This Series:</h3>\n<ul>\n<li><a href=\"/functional-javascript-part-1-introduction/\">Part 1: Introduction</a></li>\n<li><a href=\"/functional-javascript-part-2-what-makes-a-language-functional/\">Part 2: What makes a language “functional”</a></li>\n<li><a href=\"/functional-javascript-part-3-apply-call-and-the-arguments-object/\">Part 3: .apply(), .call(), and the arguments object</a></li>\n<li><a href=\"/functional-javascript-part-4-function-currying/\">Part 4: Function Currying</a></li>\n<li>Part 5: Variadic Functions (coming soon)</li>\n<li>Part 6: 2048 Game &#x26; Solver, a “practical” example (coming soon)</li>\n<li>Part 7: Lazy sequences / collections (coming soon)</li>\n<li>Part 8: Why Argument order matters (coming soon)</li>\n<li>Part 9: Functors and Monads (coming soon)</li>\n</ul>","fields":{"readingTime":{"text":"9 min read"}},"frontmatter":{"title":"Functional JavaScript, Part 3: apply, call, and the arguments object","date":"April 23, 2014"}}},"pageContext":{"slug":"/functional-javascript-part-3-apply-call-and-the-arguments-object/","previous":{"fields":{"slug":"/functional-javascript-part-2-what-makes-a-language-functional/"},"frontmatter":{"title":"Functional JavaScript, Part 2: What Makes a Language Functional?"}},"next":{"fields":{"slug":"/functional-javascript-part-4-function-currying/"},"frontmatter":{"title":"Functional JavaScript, Part 4: Function Currying"}}}}