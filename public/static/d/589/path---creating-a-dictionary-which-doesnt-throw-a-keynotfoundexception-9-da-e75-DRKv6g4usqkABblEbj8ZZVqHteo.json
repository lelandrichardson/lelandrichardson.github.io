{"data":{"site":{"siteMetadata":{"title":"Intelligible Babble","author":"Leland Richardson"}},"markdownRemark":{"id":"ef1d2216-234b-589b-9d42-a504b1809d54","excerpt":"I find it interesting when there are certain tasks in one language which feel simple, fluid, and elegant to write, when in another language…","html":"<p>I find it interesting when there are certain tasks in one language which feel simple, fluid, and elegant to write, when in another language they feel sloppy and wrong. This happens every so often and I try to think of a clean way to solve such a problem. Often this doesn’t lead anywhere, but I wanted to briefly share something that did.</p>\n<h3>Dictionaries in JavaScript</h3>\n<p>In JavaScript, it is fairly commonplace to treat standard objects as a “hash map” or a dictionary / set of key value pairs. Indeed it could possibly not be simpler:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// our dictionary</span></code></pre></div>\n<p>in this case we can set the dictionary entry for “foo” to be 1:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">dict<span class=\"token punctuation\">[</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"xyz\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>we can then retrieve it:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> dict<span class=\"token punctuation\">[</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Pretty standard. What if we want to get a value, if it’s present, and a default if not?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> dict<span class=\"token punctuation\">[</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"abc\" is our default value for \"bar\"</span></code></pre></div>\n<p>Pretty simple.</p>\n<h3>Dictionaries in C</h3>\n<p>Now let’s jump over to C#. Of course, in C#‘s case, we are strictly typed… so we are going to need to declare a typed dictionary like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> dict <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">Dictionary</span><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Still pretty simple. So now we want to add an entry… also pretty simple:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">dict<span class=\"token punctuation\">[</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// using indexer</span>\ndict<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// using .Add() method</span></code></pre></div>\n<p>Getting a value:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> dict<span class=\"token punctuation\">[</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is all good and easy. But there <em>is</em> a bit of a difference between this line and the JavaScript equivalent: in this case, we might have just thrown an error!</p>\n<p>If there is no entry for “foo” in the dictionary, then this will throw a <code class=\"language-text\">KeyNotFoundException</code>.</p>\n<p>This isn’t necessarily a bad thing. In many cases this is exactly what we want. In fact, what is the alternative?</p>\n<p>You see, in JavaScript, we have a value <code class=\"language-text\">undefined</code> to specify these types of situations… the situations where you requested a value that has never been declared. In C#, we just have <code class=\"language-text\">null</code>.</p>\n<p>The problem is, in C#, it is perfectly valid to <em>set</em> a value of the dictionary to <code class=\"language-text\">null</code>. So how does one differentiate between accessing a key of a dictionary which has never been set, and accessing the key of a dictionary whose corresponding value is null?</p>\n<p>This question, of course, was asked by the creators of the language C# years ago, and the answer was to throw a <code class=\"language-text\">KeyNotFoundException</code> in the case of the former.</p>\n<p>Although I don’t disagree with their conclusion, I sometimes wish there was a different way. Sometimes I don’t want there to be a difference between a null value and the absense of a key. Without implementing your own dictionary, the best you can do is this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">string</span> bar<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dict<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> bar <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    bar <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// do something with bar</span></code></pre></div>\n<p>That just seems a bit verbose to me. The alternate syntax would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> dict<span class=\"token punctuation\">[</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Of course, this is actually quite simple to obtain if you just implement your own “safe” version of Dictionary:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SafeDictionary</span><span class=\"token operator\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TValue<span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> Dictionary<span class=\"token operator\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TValue<span class=\"token operator\">></span> <span class=\"token keyword\">where</span> TValue <span class=\"token punctuation\">:</span> <span class=\"token keyword\">class</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TValue</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// adding null value is pointless...</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// nothing to do</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TValue</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">TValue</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">value</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">set</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// setting value null is same as removing it</span>\n                <span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">base</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The most significant limitation here is that you have to restrict <code class=\"language-text\">TValue</code> to <code class=\"language-text\">where TValue : class</code>, so as to make it nullable.</p>\n<p>I’m not sure if anyone else has struggled with this as an issue, but if so, feel free to use the above class!</p>","fields":{"readingTime":{"text":"4 min read"}},"frontmatter":{"title":"Creating a Dictionary<T,V> which doesn't throw a KeyNotFoundException","date":"March 10, 2014"}}},"pageContext":{"slug":"/creating-a-dictionary-which-doesnt-throw-a-keynotfoundexception/","previous":{"fields":{"slug":"/a-better-query-language-bql-language-specification/"},"frontmatter":{"title":"A Better Query Language: BQL Language Specification"}},"next":{"fields":{"slug":"/functional-javascript-part-1-introduction/"},"frontmatter":{"title":"Functional JavaScript, Part 1: Introduction"}}}}