{"data":{"site":{"siteMetadata":{"title":"Intelligible Babble","author":"Leland Richardson"}},"markdownRemark":{"id":"98bcedaf-3bcc-5157-b27f-950a7b5d4355","excerpt":"Have you ever written a multi-threaded application in .NET? If you have, chances are, you think that  making thread-safe calls to update…","html":"<p>Have you ever written a multi-threaded application in .NET? If you have, chances are, you think that <a href=\"http://msdn.microsoft.com/en-us/library/ms171728.aspx\">making thread-safe calls to update your UI</a> is, well, really annoying and verbose at best.</p>\n<p>The issue is that every time you are doing work in a thread other than your UI thread, and then need to update the UI from said thread, you need to create a delegate pattern in order to do so without getting an InvalidOperationException.</p>\n<p>Well, turns out Michael Demeersseman over at CodeProject shares our hatred for these cross-thread calls, and wrote <a title=\"Updating Your Form from Another Thread without Creating Delegates for Every Type of Update\" href=\"http://www.codeproject.com/KB/cs/Threadsafe_formupdating.aspx\">some generic extension methods</a> which allow you to now perform cross-thread operations in essentially one line of code.</p>\n<p>The extension methods are as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public static TResult SafeInvoke(this T isi, Func call) where T : ISynchronizeInvoke\n{\n    if (isi.InvokeRequired) {\n        IAsyncResult result = isi.BeginInvoke(call, new object[] { isi });\n        object endResult = isi.EndInvoke(result); return (TResult)endResult;\n    }\n    else\n        return call(isi);\n}\n\npublic static void SafeInvoke(this T isi, Action call) where T : ISynchronizeInvoke\n{\n    if (isi.InvokeRequired) isi.BeginInvoke(call, new object[] { isi });\n    else\n        call(isi);\n}</code></pre></div>\n<p>This is cool.  So now if I want to set the value of a progress bar:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">progressBar1.SafeInvoke(b =&gt; b.Value = progress);</code></pre></div>\n<p>Or if i want to simply call a method in my UI thread from another:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">formInstance.SafeInvoke(f =&gt; f.myFormMethod(&quot;parameter1&quot;,&quot;parameter2&quot;));</code></pre></div>\n<p>And finally, grabbing text/value from a control in your UI thread is one line too:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">string textBoxText = txtBox1.SafeInvoke(f =&gt; f.txtBox1.Text);</code></pre></div>\n<p>See the <a title=\"Updating Your Form from Another Thread without Creating Delegates for Every Type of Update\" href=\"http://www.codeproject.com/KB/cs/Threadsafe_formupdating.aspx\">full article</a> here.</p>","fields":{"readingTime":{"text":"2 min read"}},"frontmatter":{"title":"Generic Method to Safely Perform Cross-Thread Invoke","date":"August 15, 2011"}}},"pageContext":{"slug":"/_generic-method-to-safely-perform-cross-thread-invoke/","previous":null,"next":{"fields":{"slug":"/_free-google-speech-recognition-api/"},"frontmatter":{"title":"Free Google Speech Recognition API"}}}}