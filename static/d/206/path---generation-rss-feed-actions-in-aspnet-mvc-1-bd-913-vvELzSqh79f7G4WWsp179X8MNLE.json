{"data":{"site":{"siteMetadata":{"title":"Intelligible Babble","author":"Leland Richardson"}},"markdownRemark":{"id":"c18ca503-f62b-5260-b1b5-7393eb47fe71","excerpt":"Generally when creating web applications, it is common to generate RSS Feeds that correspond to various pages of the application. The .NET…","html":"<p>Generally when creating web applications, it is common to generate RSS Feeds that correspond to various pages of the application.</p>\n<p>The .NET Framework generally provides pretty decent tools to write XML like the <code class=\"language-text\">XmlTextWriter</code>, but RSS is a fairly narrow specification of XML that can be quite repetitive if you use an <code class=\"language-text\">XmlTextWriter</code> every time. Thus, let’s create some helpers to do all that stuff for us.</p>\n<h2>Holding the Data</h2>\n<p>Starting off, let’s just create some Plain Old CLR Objects to hold the data. Naturally, let’s make an object <code class=\"language-text\">RssFeedItem</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public class RssFeedItem\n{\n    public RssFeedItem() { Tags = new List&lt;string&gt;(); }\n    public string Creator { get; set; }\n    public string Title { get; set; }\n    public string Description { get; set; }\n    public string Url { get; set; }\n    public DateTime Published { get; set; }\n    public List&lt;string&gt; Tags { get; set; }\n\n    public string ImageUrl { get; set; }\n}</code></pre></div>\n<p>In addition, RSS Feeds themselves require several pieces of data to be associated with them as well, so we create an <code class=\"language-text\">RssFeed</code> class:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public class RssFeed\n{\n    public RssFeed() { Items = new List&lt;RssFeedItem&gt;(); }\n    public string Title { get; set; }\n    public string Description { get; set; }\n    public string Url { get; set; }\n    public string Language { get; set; }\n    public string ImageUrl { get; set; }\n    public string Copyright { get; set; }\n    public List&lt;RssFeedItem&gt; Items { get; set; }\n}</code></pre></div>\n<p>What all of these properties are should be fairly straight forward, however if you want to dig in to some of the specifics, check out the <a href=\"http://cyber.law.harvard.edu/rss/rss.html\">Full RSS 2.0 Specification</a></p>\n<h2>Generating the XML</h2>\n<p>We would like to make sure that the XML we generate is valid, so we would like everything to go through an <code class=\"language-text\">XmlTextWritier</code>. We are going to create an <code class=\"language-text\">RssWriter</code> object to encapsulate this.</p>\n<p>The two important methods on the RssWriter are going to be writing an <code class=\"language-text\">RssFeedItem</code> and writing an <code class=\"language-text\">RssFeed</code>. To start the feed, we are going to create a <code class=\"language-text\">Start(...)</code> method. The <code class=\"language-text\">RssWriter</code> also has an <code class=\"language-text\">XmlTextWriter</code> property named <code class=\"language-text\">Writer</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public void Start(\n    string title,\n    string mainUrl,\n    string imageUrl = null,\n    string description = null,\n    string copyright = null,\n    string language = null)\n{\n    Writer.WriteStartDocument();\n    // The mandatory rss tag\n    Writer.WriteStartElement(&quot;rss&quot;);\n    Writer.WriteAttributeString(&quot;version&quot;, &quot;2.0&quot;);\n    Writer.WriteAttributeString(&quot;xmlns:media&quot;, &quot;http://search.yahoo.com/mrss/&quot;);\n    Writer.WriteAttributeString(&quot;xmlns:atom&quot;, &quot;http://www.w3.org/2005/Atom&quot;);\n    // The channel tag contains RSS feed details\n    Writer.WriteStartElement(&quot;channel&quot;);\n\n        // This indentation is intentional, but purely aesthetic\n        Writer.WriteElementString(&quot;title&quot;, title);\n        Writer.WriteElementString(&quot;link&quot;, mainUrl);\n        // description is optional\n        if (description != null)\n        {\n            Writer.WriteStartElement(&quot;description&quot;);\n            Writer.WriteCData(description);\n            Writer.WriteEndElement();\n        }\n        //copyright is optional\n        if (copyright != null)\n        {\n            Writer.WriteElementString(&quot;copyright&quot;, copyright);\n        }\n\n        Writer.WriteElementString(&quot;pubDate&quot;, DateTime.Now.ToString(&quot;r&quot;));\n\n\n        Writer.WriteStartElement(&quot;image&quot;);\n            Writer.WriteElementString(&quot;url&quot;, imageUrl);\n            Writer.WriteElementString(&quot;link&quot;, mainUrl);\n            Writer.WriteElementString(&quot;title&quot;, title);\n        Writer.WriteEndElement();\n\n\n        //Atom Spec &quot;self&quot; link\n        //http://validator.w3.org/appc/docs/warning/MissingAtomSelfLink.html\n        Writer.WriteStartElement(&quot;link&quot;, &quot;atom&quot;);\n            Writer.WriteAttributeString(&quot;href&quot;,mainUrl);\n            Writer.WriteAttributeString(&quot;rel&quot;, &quot;self&quot;);\n            Writer.WriteAttributeString(&quot;type&quot;, &quot;application/rss+xml&quot;);\n        Writer.WriteEndElement();\n}</code></pre></div>\n<p>Looking at this method, it should be pretty clear why this code can get a bit <strong>repetitive</strong>. One thing to note is that I am using a custom imported namespace with this line:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Writer.WriteAttributeString(&quot;xmlns:media&quot;, &quot;http://search.yahoo.com/mrss/&quot;);</code></pre></div>\n<p>Which is used to pull in yahoo’s “Media RSS” spec, a commonly used specification for embedding images, html, and media into your RSS feeds. This was purely an implementation call and might not be to your liking.</p>\n<p>We are likewise going to create an <code class=\"language-text\">End()</code> method which is simply the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public void End()\n{\n    Writer.WriteEndElement();\n    Writer.WriteEndElement();\n    Writer.WriteEndDocument();\n    Writer.Flush();\n    Writer.Close();\n}</code></pre></div>\n<p>This simply “ends” all of the tags that we created in the <code class=\"language-text\">Start()</code> method and closes the writer.</p>\n<p>Executing the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var rssWriter = new RssWriter();\nrssWriter.Start(\n    &quot;This is a Title&quot;,\n    &quot;http://example.com/feed&quot;,\n    &quot;http://example.com/feed-image.png&quot;,\n    &quot;This is a Description&quot;\n);\nrssWriter.End();</code></pre></div>\n<p>will produce the following XML:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;rss version=&quot;2.0&quot; xmlns:media=&quot;http://search.yahoo.com/mrss/&quot; xmlns:atom=&quot;http://www.w3.org/2005/Atom&quot;&gt;\n\t&lt;channel&gt;\n\t\t&lt;title&gt;This is a Title&lt;/title&gt;\n\t\t&lt;link&gt;http://example.com/feed&lt;/link&gt;\n\t\t&lt;pubDate&gt;Sun, 03 Feb 2013 18:39:09 GMT&lt;/pubDate&gt;\n            &lt;description&gt;&lt;![CDATA[This is a Description]]&gt;&lt;/description&gt;\n\t\t&lt;image&gt;\n\t\t\t&lt;url&gt;http://example.com/feed-image.png&lt;/url&gt;\n\t\t\t&lt;link&gt;http://example.com/feed&lt;/link&gt;\n\t\t\t&lt;title&gt;This is a Title&lt;/title&gt;\n\t\t&lt;/image&gt;\n\t\t&lt;link href=&quot;http://example.com/feed&quot; rel=&quot;self&quot; type=&quot;application/rss+xml&quot; xmlns=&quot;atom&quot; /&gt;\n\t&lt;/channel&gt;\n&lt;/rss&gt;</code></pre></div>\n<p>Next, we have the writing of XML from an <code class=\"language-text\">RssFeedItem</code>. This is where all the meat of the feed goes.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public void Item(\n    string title,\n    string description,\n    string link,\n    string guid,\n    DateTime pubDate,\n    IEnumerable&lt;string&gt; tags = null,\n    string imageUrl = null)\n{\n    Writer.WriteStartElement(&quot;item&quot;);\n    Writer.WriteElementString(&quot;title&quot;, title);\n    Writer.WriteElementString(&quot;description&quot;, description);\n    Writer.WriteElementString(&quot;link&quot;, link);\n    Writer.WriteElementString(&quot;guid&quot;, guid);\n    Writer.WriteElementString(&quot;pubDate&quot;, pubDate.ToString(&quot;r&quot;));\n    if (tags != null)\n    {\n        foreach (var tag in tags)\n        {\n            Writer.WriteStartElement(&quot;category&quot;);\n            Writer.WriteCData(description);\n            Writer.WriteEndElement();\n        }\n    }\n\n    if (imageUrl != null)\n    {\n        Writer.WriteStartElement(&quot;thumbnail&quot;, &quot;media&quot;);\n            Writer.WriteAttributeString(&quot;url&quot;, imageUrl);\n            Writer.WriteAttributeString(&quot;height&quot;, &quot;75&quot;);\n            Writer.WriteAttributeString(&quot;width&quot;, &quot;75&quot;);\n        Writer.WriteEndElement();\n    }\n\n    Writer.WriteEndElement();\n}</code></pre></div>\n<p>One of the things to note here is that I am adding a <code class=\"language-text\">&lt;thumbnail&gt;</code> element for each item, which is part of the Yahoo “Media RSS” spec I mentioned above.</p>\n<p>Additionally, the <code class=\"language-text\">&lt;description&gt;</code> element of each item is escaped by a <code class=\"language-text\">&lt;!CDATA[ * ]]&gt;</code> element.</p>\n<h3>Hooking into the ASP.Net Pipeline</h3>\n<p>Now we want a clean way to hook this all up with MVC and return it as an <code class=\"language-text\">ActionResult</code> inside a controller. To do this we create an <code class=\"language-text\">RssFeedResult</code> class:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public class RssFeedResult : ActionResult\n{\n\n    public RssFeed Feed { get; set; }\n\n    public RssFeedResult(RssFeed feed)\n    {\n        Feed = feed;\n    }\n\n    public override void ExecuteResult(ControllerContext context)\n    {\n        var response = context.HttpContext.Response;\n        response.ContentType = &quot;application/rss+xml&quot;;\n        RssWriter.Execute(Feed, context.HttpContext.Response.OutputStream);\n    }\n}</code></pre></div>\n<p>Where the <code class=\"language-text\">RssWriter.Execute</code> method is a static method which simply does the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public static void Execute(RssFeed feed, Stream stream, Encoding encoding = null)\n{\n    var writer = new RssWriter(stream, encoding);\n    writer.Start(feed);\n\n    foreach (var item in feed.Items)\n    {\n        writer.Item(item);\n    }\n    writer.End();\n}</code></pre></div>\n<p>Now, inside your Controller you can create an Action as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">private RssFeedResult Feed()\n{\n    RssFeed feed;\n\n    //set feed properties and populate it&#39;s .Items list\n\n    // return the result\n    return new RssFeedResult(feed);\n}</code></pre></div>\n<p>And then we are done! I’ll provide below the full code for the <code class=\"language-text\">RssWriter</code> class:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public class RssWriter\n{\n    public XmlTextWriter Writer { get; private set; }\n\n    public RssWriter()\n    {\n        Writer = new XmlTextWriter(HttpContext.Current.Response.OutputStream, Encoding.UTF8);\n    }\n\n    public RssWriter(Stream stream, Encoding encoding = null)\n    {\n        Writer = new XmlTextWriter(stream, encoding ?? Encoding.UTF8);\n    }\n\n    public static void Execute(RssFeed feed, Stream stream, Encoding encoding = null)\n    {\n        var writer = new RssWriter(stream, encoding);\n        writer.Start(feed);\n\n        foreach (var item in feed.Items)\n        {\n            writer.Item(item);\n        }\n        writer.End();\n    }\n\n    public void End()\n    {\n        Writer.WriteEndElement();\n        Writer.WriteEndElement();\n        Writer.WriteEndDocument();\n        Writer.Flush();\n        Writer.Close();\n    }\n\n    public void Start(RssFeed feed)\n    {\n        Start(feed.Title, feed.Url, feed.ImageUrl, feed.Description, feed.Copyright, feed.Language);\n    }\n\n    public void Start(\n        string title,\n        string mainUrl,\n        string imageUrl = null,\n        string description = null,\n        string copyright = null,\n        string language = null)\n    {\n        Writer.WriteStartDocument();\n        // The mandatory rss tag\n        Writer.WriteStartElement(&quot;rss&quot;);\n        Writer.WriteAttributeString(&quot;version&quot;, &quot;2.0&quot;);\n        Writer.WriteAttributeString(&quot;xmlns:media&quot;, &quot;http://search.yahoo.com/mrss/&quot;);\n        Writer.WriteAttributeString(&quot;xmlns:atom&quot;, &quot;http://www.w3.org/2005/Atom&quot;);\n        // The channel tag contains RSS feed details\n        Writer.WriteStartElement(&quot;channel&quot;);\n            Writer.WriteElementString(&quot;title&quot;, title);\n            Writer.WriteElementString(&quot;link&quot;, mainUrl);\n            if (description != null)\n            {\n                Writer.WriteStartElement(&quot;description&quot;);\n                Writer.WriteCData(description);\n                Writer.WriteEndElement();\n            }\n            if (copyright != null)\n            {\n                Writer.WriteElementString(&quot;copyright&quot;, copyright);\n            }\n\n            Writer.WriteElementString(&quot;pubDate&quot;, DateTime.Now.ToString(&quot;r&quot;));\n\n\n            Writer.WriteStartElement(&quot;image&quot;);\n                Writer.WriteElementString(&quot;url&quot;, imageUrl);\n                Writer.WriteElementString(&quot;link&quot;, mainUrl);\n                Writer.WriteElementString(&quot;title&quot;, title);\n            Writer.WriteEndElement();\n\n\n            //Atom Spec &quot;self&quot; link\n            //http://validator.w3.org/appc/docs/warning/MissingAtomSelfLink.html\n            Writer.WriteStartElement(&quot;link&quot;, &quot;atom&quot;);\n                Writer.WriteAttributeString(&quot;href&quot;,mainUrl);\n                Writer.WriteAttributeString(&quot;rel&quot;, &quot;self&quot;);\n                Writer.WriteAttributeString(&quot;type&quot;, &quot;application/rss+xml&quot;);\n            Writer.WriteEndElement();\n    }\n\n    public void Item(RssFeedItem item)\n    {\n        Item(\n            item.Title,\n            item.Description,\n            item.Url,\n            item.Url,\n            item.Published,\n            item.Tags,\n            item.ImageUrl\n            );\n    }\n\n    public void Item(\n        string title,\n        string description,\n        string link,\n        string guid,\n        DateTime pubDate,\n        IEnumerable&lt;string&gt; tags = null,\n        string imageUrl = null)\n    {\n        Writer.WriteStartElement(&quot;item&quot;);\n        Writer.WriteElementString(&quot;title&quot;, title);\n        Writer.WriteElementString(&quot;description&quot;, description);\n        Writer.WriteElementString(&quot;link&quot;, link);\n        Writer.WriteElementString(&quot;guid&quot;, guid);\n        Writer.WriteElementString(&quot;pubDate&quot;, pubDate.ToString(&quot;r&quot;));\n        if (tags != null)\n        {\n            foreach (var tag in tags)\n            {\n                Writer.WriteStartElement(&quot;category&quot;);\n                Writer.WriteCData(description);\n                Writer.WriteEndElement();\n            }\n        }\n\n        if (imageUrl != null)\n        {\n            Writer.WriteStartElement(&quot;thumbnail&quot;, &quot;media&quot;);\n                Writer.WriteAttributeString(&quot;url&quot;, imageUrl);\n                Writer.WriteAttributeString(&quot;height&quot;, &quot;75&quot;);\n                Writer.WriteAttributeString(&quot;width&quot;, &quot;75&quot;);\n            Writer.WriteEndElement();\n        }\n\n        Writer.WriteEndElement();\n    }\n}</code></pre></div>\n<p>Happy coding!</p>","fields":{"readingTime":{"text":"6 min read"}},"frontmatter":{"title":"Generation RSS Feed Actions in ASP.NET MVC","date":"February 04, 2013"}}},"pageContext":{"slug":"/_generation-rss-feed-actions-in-aspnet-mvc/","previous":{"fields":{"slug":"/_how-to-write-maintainable-jquery-applications/"},"frontmatter":{"title":"How to write Maintainable jQuery Applications"}},"next":{"fields":{"slug":"/_building-an-image-uploading--resizing-framework-in-aspnet/"},"frontmatter":{"title":"Building an Image Uploading & Resizing Framework in ASP.Net"}}}}