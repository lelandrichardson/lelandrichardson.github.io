{
  "data": {
    "site": {
      "siteMetadata": {
        "title": "Intelligible Babble",
        "author": "Leland Richardson"
      }
    },
    "markdownRemark": {
      "id": "a575ff0a-7d38-5156-b71a-1567c735799f",
      "excerpt": "Last week was the week of Google I/O 2019. It was a particularly exciting I/O for me, as it was the first time Google has talked publicly…",
      "html": "<p>Last week was the week of Google I/O 2019. It was a particularly exciting I/O for me, as it was the first time Google has talked publicly about Jetpack Compose, the project I was hired to work on in February of 2018.</p>\n<p>Compose is an ambitious multi-team effort to reimagine Android’s UI Toolkit more than 10 years after the Android Platform launched with the original UI Toolkit.</p>\n<p>If you haven’t yet watched the <a href=\"https://www.youtube.com/watch?v=VsStyq4Lzxo\">session on Declarative UI Patterns</a>, you should do that now. It is a proper overview of the motivations and goals behind the project, which this post is <em>not</em>.</p>\n<iframe \n  style=\"width:100%;height:320px;\" \n  src=\"https://www.youtube.com/embed/VsStyq4Lzxo\" \n  frameborder=\"0\" \n  allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" \n  allowfullscreen\n></iframe>\n<p>Since we’ve announced and <a href=\"http://d.android.com/jetpackcompose\">open sourced Compose</a>, it has generated a lot of interest and questions about how it works. I spent some time thinking about what the right thing to talk about first would be. There’s so much to talk about—a lot of pieces that work together and are hard to understand without the context of the other pieces.</p>\n<p>Ultimately, I came to the conclusion of writing this post. There will (hopefully!) be many more blog posts that follow this one that go in depth about more specific areas, but I think it’s important to start with a good foundational overview.</p>\n<p>The goal of this post is to give people a solid mental model around what Compose <em>does</em>, and eliminate anything one might think of as “magic”. One of the best ways to do this, I think, is to try and construct a simpler version of what we’re doing, and incrementally add on to it until we have something that mostly resembles the real thing. In other words, let’s try and build Compose starting from nothing but “first principles”.</p>\n<p>In this post I am not going to try to convince you of the motivations behind this architecture or the project overall; I’m only trying to help explain the <em>what</em> and not the <em>why</em>.</p>\n<p>It’s important to say outright that the <strong>details of this post may not be 100% technically accurate</strong>. Even if they are right now, Compose is so early in its development that it may quickly <em>become</em> inaccurate. Nevertheless, I will do my best to point out places where I’m simplifying things or talking about aspects that are still unimplemented.</p>\n<h2>UIs are Trees</h2>\n<p>At its core, Compose is designed to efficiently build <em>and maintain</em> tree-like data structures. More specifically, it provides a programming model to describe how that tree will <em>change over time</em>.</p>\n<p>This programming model is not entirely new. We’ve gotten a lot of inspiration from other frameworks such as <a href=\"https://reactjs.org/\">React</a>, <a href=\"https://fblitho.com/\">Litho</a>, <a href=\"https://vuejs.org/\">Vue</a>,  <a href=\"https://flutter.dev/\">Flutter</a>, and more, all of which mostly accomplish the same goal, albeit in slightly different ways.</p>\n<p>As one might surmise from the list of frameworks above, one of the more compelling use cases for this type of a system is to build user interfaces (UIs). UIs are typically tree-like data structures that change over time. Moreover, UIs are becoming more and more dynamic and complicated, resulting in demand for a programming model to help tame that complexity.</p>\n<p>For Compose, the actual type of the tree does not matter much here. Compose’s runtime does not target a specific tree node type, but rather requires that you implement an <code class=\"language-text\">ApplyAdapter&lt;N&gt;</code> interface for any type of tree node base class <code class=\"language-text\">N</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> ApplyAdapter<span class=\"token operator\">&lt;</span>N<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> N<span class=\"token punctuation\">.</span><span class=\"token function\">insertAt</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> instance<span class=\"token operator\">:</span> N<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> N<span class=\"token punctuation\">.</span><span class=\"token function\">removeAt</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> count<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> N<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>from<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> <span class=\"token keyword\">to</span><span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> count<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>These three operations are really all that we need to manage a tree. Compose is already being used to target several different tree types: Android Views, ComponentNodes, Vectors, TextSpan, and there will likely be more to come.</p>\n<p>Making things generic adds complexity, but isn’t important to understand how things work. Rather than go into details about how this generalism is achieved, lets define a basic tree-like data structure that we can use for the purposes of this blog post.</p>\n<p>We can imagine an extremely simple UI library that had the following types defined:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> Node <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">val</span> children <span class=\"token operator\">=</span> mutableListOf<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> Box <span class=\"token operator\">:</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> text<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Here we just have two primitives: <code class=\"language-text\">Box</code> and <code class=\"language-text\">Text</code>. In reality there would probably be more, and they would probably have more properties and methods etc., but again, we are keeping it simple. In the existing Android toolkit, this would correspond to <a href=\"https://developer.android.com/reference/android/view/View\"><code class=\"language-text\">View</code></a> and all of it’s subclasses, and on the web this would correspond to any <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element\"><code class=\"language-text\">Element</code></a>.</p>\n<p>Now we need a way to take a tree of Nodes, and render their current state to the screen:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">renderNodeToScreen</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> Node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>A “Hello World” type application in this application might look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> onVsync <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">renderNodeToScreen</span><span class=\"token punctuation\">(</span><span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Of course we have glossed over a lot of complexity that might go into the <code class=\"language-text\">renderNodeToScreen</code> method, but for the purposes of this article, it’s implementation is not important.</p>\n<p>Let’s move on to a slightly more complex example of a “To Do List” App.</p>\n<h2>UI as a Transform Function</h2>\n<p>A practical guiding principle to structuring an application is to separate the concept of a “model” from that of the “UI”.</p>\n<p>Given our “model” as a set of <code class=\"language-text\">TodoItem</code>s, one way to do this is to create a function that just transforms our list of items into a tree of <code class=\"language-text\">Node</code>s:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">TodoApp</span><span class=\"token punctuation\">(</span>items<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>TodoItem<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Node <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token function\">Box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           children<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">Box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span>\n               children<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>\n                   <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[${if (item.completed) \"</span>x<span class=\"token string\">\" else \"</span> <span class=\"token string\">\"}] <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>item<span class=\"token punctuation\">.</span>title<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This can be used elsewhere in your app to render the UI to the screen in response to your application-specific data model. We can imagine a working app as something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  todoItemRepository<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span> <span class=\"token punctuation\">{</span> items <span class=\"token operator\">-></span>\n    <span class=\"token function\">renderNodeToScreen</span><span class=\"token punctuation\">(</span><span class=\"token function\">TodoApp</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There are a few problems with this approach:</p>\n<p>todo: refine these problems</p>\n<ol>\n<li><strong>Composability</strong>. It is difficult to break the logic of transforming data into this tree into smaller pieces.</li>\n<li><strong>Allocations</strong> UIs can often have very large trees, but only small parts of them change dynamically</li>\n<li><strong>Allocations</strong> Every time we want to update something, we end up recreating (reallocating) the entire tree</li>\n</ol>\n<p>Adding nodes to the children of the parents explicitly can add some complexity. We can create an abstraction for “emitting” nodes into a context object, instead of explicitly adding nodes to the children array of the parent.</p>\n<p>We will do more with this context object later, and in general it is helping us “compose” the tree, so let’s call it a <code class=\"language-text\">Composer</code>. The simplest interface and implementation of this so far could be the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> Composer <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// add node as a child to the current Node, execute</span>\n  <span class=\"token comment\">// `block` with `node` as the current Node</span>\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> Node<span class=\"token punctuation\">,</span> block<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// naive implementation. feel free to ignore.</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">ComposerImpl</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> Node<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Composer <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> current<span class=\"token operator\">:</span> Node <span class=\"token operator\">=</span> root\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> Node<span class=\"token punctuation\">,</span> block<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> parent <span class=\"token operator\">=</span> current\n    parent<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n    current <span class=\"token operator\">=</span> node\n    <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    current <span class=\"token operator\">=</span> parent\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we can imagine having a top level function called <code class=\"language-text\">compose</code> which would create a <code class=\"language-text\">Composer</code>, run a lambda with it as the receiver, and then return the root node:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>block<span class=\"token operator\">:</span> Composer<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Node <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">Box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">let</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">ComposerImpl</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Using this new abstraction, we can rewrite our To Do App example:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> Composer<span class=\"token punctuation\">.</span><span class=\"token function\">TodoApp</span><span class=\"token punctuation\">(</span>items<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>TodoItem<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token function\">Box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[${if (item.completed) \"</span>x<span class=\"token string\">\" else \"</span> <span class=\"token string\">\"}] <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>item<span class=\"token punctuation\">.</span>title<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, whenever we want to render our UI based on the items we have, we can run the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// render UI</span>\n<span class=\"token function\">renderNodeToScreen</span><span class=\"token punctuation\">(</span>compose <span class=\"token punctuation\">{</span> <span class=\"token function\">TodoApp</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>With this new abstraction, it is also easy to pull out parts of our UI into smaller functions:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> Composer<span class=\"token punctuation\">.</span><span class=\"token function\">TodoItem</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> TodoItem<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[${if (item.completed) \"</span>x<span class=\"token string\">\" else \"</span> <span class=\"token string\">\"}] <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>item<span class=\"token punctuation\">.</span>title<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> Composer<span class=\"token punctuation\">.</span><span class=\"token function\">TodoApp</span><span class=\"token punctuation\">(</span>items<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>TodoItem<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token function\">Box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token function\">TodoItem</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This type of easy decomposition or factoring of common bits of UI logic into functions is a critically important feature. We can call each of these functions “Components”.</p>\n<h2>Positional Memoization</h2>\n<p>Someone performance conscious might look at the above code snippet and point out that we are creating a completely new tree every time we run <code class=\"language-text\">compose</code>. For large applications, this could create a lot of garbage on each successive pass. Furthermore, it means that if any of those nodes have any private state, the state will get thrown away each time we rebuild the hierarchy.</p>\n<p>There are several ways one might go about fixing this, but Compose utilizes a technique we are calling “Positional Memoization”. Much of Compose’s architecture is built around this technique, so let’s try to build up a solid mental model of how it works.</p>\n<p>In the last section, we introduced a <code class=\"language-text\">Composer</code> object, which held some of the context of where in the tree we were and what node we were emitting into currently. Our goal is to preserve the programming model we had above, but try and reuse the nodes that we had created in the previous execution of the UI. Essentially, we want to cache each node.</p>\n<p>Most caches require keys—some way of identifying which object you’re wanting to retrieve the cached result of. Assuming we are caching each node in the tree we are creating, in the example above we can see that every time we execute the <code class=\"language-text\">TodoApp</code> function, we will consult the cache in the same exact order every time the function is executed (<em>this logic breaks down if we introduce any conditional logic into our app, but we’ll get to that later</em>).</p>\n<p>If we utilize <em>execution order</em> as the cache key, we can avoid lookup cost entirely; we can just use a flat list or array to hold the nodes resulting in retrieval being very cheap. We can just keep track of a “current index” while we execute the app transform function and increment it every time we retrieve a value.</p>\n<p>As a simple implementation of this, consider the following two methods being added to the <code class=\"language-text\">Composer</code> class we had above:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> Composer <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// returns whether current cached item matches the passed in value.</span>\n  <span class=\"token comment\">// If it doesn't, it replaces it in the table. consumes item.</span>\n  <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">changed</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean\n\n  <span class=\"token comment\">// return the current item in the cache, if `update` is true or the</span>\n  <span class=\"token comment\">// cache is empty, run `factory`, cache and return result</span>\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">cache</span><span class=\"token punctuation\">(</span>update<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span> factory<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> T<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// naive implementation. feel free to ignore</span>\n<span class=\"token keyword\">class</span> ComposerImpl<span class=\"token operator\">:</span> Composer <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> cache <span class=\"token operator\">=</span> mutableListOf<span class=\"token operator\">&lt;</span>Any<span class=\"token operator\">?</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">changed</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> index <span class=\"token operator\">=</span> index<span class=\"token operator\">++</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">.</span>size <span class=\"token operator\">&lt;=</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cache<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n        <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> item <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        cache<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n        item <span class=\"token operator\">!=</span> value\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">cache</span><span class=\"token punctuation\">(</span>update<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span> factory<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> T<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>update<span class=\"token punctuation\">)</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span> cache<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> it <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> cache<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> T\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this naive implementation we are just using a plain <code class=\"language-text\">MutableList</code>, but in Compose we are using a <a href=\"https://en.wikipedia.org/wiki/Gap_buffer\">Gap Buffer</a> in order to keep lookups, insertions, and deletions as cheap as possible.</p>\n<p>With these primitives we can create a more general purpose <code class=\"language-text\">memo</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// Compoare each input with the previous value at this position. If any</span>\n<span class=\"token comment\">// have changed, return result of factory, otherwise return previous result</span>\n<span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> Composer<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">vararg</span> inputs<span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> factory<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> T<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">var</span> valid <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>input <span class=\"token keyword\">in</span> inputs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       valid <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token function\">changed</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> valid\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> <span class=\"token function\">cache</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>valid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that <code class=\"language-text\">memo</code> will increment the cache index <code class=\"language-text\">n+1</code> times when it is called with <code class=\"language-text\">n</code> inputs. This means that it has the expectation that it will be called with the same number of inputs each time it is called for a given “position”, or else the cache could get misaligned over time.</p>\n<p>With this <code class=\"language-text\">memo</code> function, we are able to change our previous <code class=\"language-text\">TodoApp</code> example to now take advantage of memoization:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> Composer<span class=\"token punctuation\">.</span><span class=\"token function\">TodoItem</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> TodoItem<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>\n       <span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>completed<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[${if (item.completed) \"</span>x<span class=\"token string\">\" else \"</span> <span class=\"token string\">\"}] <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>item<span class=\"token punctuation\">.</span>title<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> Composer<span class=\"token punctuation\">.</span><span class=\"token function\">TodoApp</span><span class=\"token punctuation\">(</span>items<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>TodoItem<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>memo <span class=\"token punctuation\">{</span> <span class=\"token function\">Box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token function\">TodoItem</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, every time we run <code class=\"language-text\">compose</code>, the nodes in the tree are reused unless they change. However, since we are using execution order to memoize, the amount of memory that we are using remains unchanged, and our programming model remains unchanged as well.</p>\n<p>In the current example, an entire node is either memoized or not, but we can actually start to memoize individual properties of a node, provided they are mutable.</p>\n<p>For instance, consider the fact that <code class=\"language-text\">text</code> is a mutable property of <code class=\"language-text\">Text</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> text<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Because of this, we can memoize all Text nodes, and just update the <code class=\"language-text\">text</code> attribute when it changes. To do this, we want a slightly different signature of <code class=\"language-text\">emit</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> Composer <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">:</span> Node<span class=\"token operator\">></span> <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>\n           factory<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> T<span class=\"token punctuation\">,</span>\n           update<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n           block<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this version of <code class=\"language-text\">emit</code>, we pass a <code class=\"language-text\">factory</code> function, which <code class=\"language-text\">emit</code> memoizes to create the <code class=\"language-text\">Node</code> itself. Then, the <code class=\"language-text\">update</code> function is called with the current <code class=\"language-text\">Node</code> instance. Inside of <code class=\"language-text\">update</code>, we can memoize the setting of the properties of it individually.</p>\n<p>For instance, the <code class=\"language-text\">TodoItem</code> component can be rewritten as:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> Composer<span class=\"token punctuation\">.</span><span class=\"token function\">TodoItem</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> TodoItem<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">val</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"[${if (item.completed) \"</span>x<span class=\"token string\">\" else \"</span> <span class=\"token string\">\"}] <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>item<span class=\"token punctuation\">.</span>title<span class=\"token delimiter variable\">}</span></span>\"</span>\n   <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>\n       <span class=\"token punctuation\">{</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">{</span> <span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> text <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So to enable optimum reuse, we can memoize each property individually, and reuse <code class=\"language-text\">Node</code> instances across every <code class=\"language-text\">compose</code> call.</p>\n<p>The keen reader might look at this and notice that there is a problem with this approach of memoizing based on execution order. This seems to break down when we introduce any type of control flow into our transform functions. For example, consider the following <code class=\"language-text\">TodoApp</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> Composer<span class=\"token punctuation\">.</span><span class=\"token function\">TodoApp</span><span class=\"token punctuation\">(</span>items<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>TodoItem<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function\">Box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">TodoItem</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">val</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"Total: <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>items<span class=\"token punctuation\">.</span>size<span class=\"token delimiter variable\">}</span></span> items\"</span>\n  <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>\n       <span class=\"token punctuation\">{</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">{</span> <span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> text <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this example, if we had 2 items the first time the app composed, and 3 items the second time, what would happen?</p>\n<p>The first two items would memoize correctly, but when we encounter the third item, we would start to “memoize” using the <code class=\"language-text\">Text</code> node that was previously used below the list of TodoItems in the first pass! Essentially, any time there is any control-flow that causes the number of items cached in the list to change, everything after that conditional logic would be misaligned with the cache.</p>\n<p>TODO: graphic</p>\n<p>To fix this, we need to introduce another fundamental concept to “Positional Memoization”: Groups.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> Composer <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// start a group, execute block inside that group, end the group</span>\n   <span class=\"token keyword\">fun</span> <span class=\"token function\">group</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I’m going to leave the implementation of this out of this blog post. In reality, implementing this correctly is <a href=\"https://android.googlesource.com/platform/frameworks/support/+/refs/heads/androidx-master-dev/compose/runtime/src/main/java/androidx/compose/Composer.kt#592\">quite complicated</a> and I think would distract from the post.</p>\n<p>This concept complicates the implementation of the memoization cache of the composer, but it is critical for Positional Memoization to work correctly. Essentially, a group is what turns the linear cache into a tree-like structure, where we can then identify when nodes in that tree have been moved, removed, or added.</p>\n<p>The <code class=\"language-text\">group</code> method is expected to have a key passed into it. This key will be cached in the cache array just like inputs to <code class=\"language-text\">memo</code>, but when it doesn’t match the key from the previous execution, the runtime will seek through the cache to determine if the group has been moved, removed, or is a new group to be inserted.</p>\n<p>Note that the key itself of the group is only scoped to the immediate parent group, so there is no need for keys to be globally unique. Now if we want to correctly use groups in our TodoApp example, we might have something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> Composer<span class=\"token punctuation\">.</span><span class=\"token function\">TodoItem</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> TodoItem<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"[${if (item.completed) \"</span>x<span class=\"token string\">\" else \"</span> <span class=\"token string\">\"}] <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>item<span class=\"token punctuation\">.</span>title<span class=\"token delimiter variable\">}</span></span>\"</span>\n  <span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> text <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> Composer<span class=\"token punctuation\">.</span><span class=\"token function\">TodoApp</span><span class=\"token punctuation\">(</span>items<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>TodoItem<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function\">Box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                   <span class=\"token function\">TodoItem</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">}</span>\n           <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">val</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"Total: <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>items<span class=\"token punctuation\">.</span>size<span class=\"token delimiter variable\">}</span></span> items\"</span>\n   <span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>\n           <span class=\"token punctuation\">{</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">{</span> <span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> text <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this case, we’ve just assigned unique integers as the keys to each group. Importantly, we’ve also surrounded the call to <code class=\"language-text\">TodoItem</code> with a group here, which will ensure that each TodoItem is memoized independently.</p>\n<p>Now, when the size of <code class=\"language-text\">items</code> changes from 2 to 3, we know to “add” items into the cache instead of look at the part of the cache that is ahead, since that would be outside of the group we are in. The same goes for cases where items are removed from the cache.</p>\n<p>Items that “move” are similarly handled, although the algorithm to do so is a bit more complex. We won’t be getting into this in detail, but the important bit to understand is that we track “moves” in a group based on the key of the child group. If we shuffled the <code class=\"language-text\">items</code> list in this example, the fact that each TodoItem call is surrounded by a group with key <code class=\"language-text\">1</code> means that the Composer has no way of knowing that the order of the items changed. This isn’t fatal, it just means that the number of changes that are memoized is unlikely to be minimal, and any state that was associated with the item may now be associated with a different item. We could, however, use the <code class=\"language-text\">item</code> itself as the key:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">group</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token function\">TodoItem</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, each group and the contained set of cached values in that group will move along with the items, and then <code class=\"language-text\">TodoItem</code> will get called with the memoization cache of the same group from the previous compose, increasing the likelihood that the changes are minimal, with the cost of moving the cached items around.</p>\n<p>I will talk more in a future post about these types of keys can manifest themselves automatically with the <code class=\"language-text\">@Pivotal</code> attribute.</p>\n<h1>State</h1>\n<p>The examples so far have shown a UI that can be represented as a simple projection of data. The reality is that most UIs end up containing a number of stateful elements that don’t make any sense as part of the overall data model, but instead are specific to the UI itself (ie, “view state”).</p>\n<p>Compose’s state model might be best understood if we try and build it up from the concepts we’ve discussed so far with Positional Memoization.</p>\n<p>To discuss state, let’s change our app example to a simple counter UI with a “count”, an “Increment” button, and a “Reset” button. To start out, we can imagine implementing this just using a global state object:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">fun</span> Composer<span class=\"token punctuation\">.</span><span class=\"token function\">App</span><span class=\"token punctuation\">(</span>recompose<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token interpolation variable\">$count</span>\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"Increment\"</span><span class=\"token punctuation\">;</span> it<span class=\"token punctuation\">.</span>onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token function\">recompose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"Reset\"</span><span class=\"token punctuation\">;</span> it<span class=\"token punctuation\">.</span>onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token function\">recompose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">var</span> recompose<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n   recompose <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token function\">renderNodeToScreen</span><span class=\"token punctuation\">(</span>compose <span class=\"token punctuation\">{</span> <span class=\"token operator\">&lt;</span>App recompose <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token function\">recompose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we can see that the App component is using global state, which means that if this component is used in multiple places, the state will be shared across each usage. Though this can be useful in some situations, it’s usually not what we want. We want to be able to create an “instance” of count that can be used locally to the “instance” of App across compositions.</p>\n<p>How can we do this in Compose?</p>\n<p>The most basic thing to try is to move count into App as a local variable:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// NOTE: This example does NOT work</span>\n<span class=\"token keyword\">fun</span> Composer<span class=\"token punctuation\">.</span><span class=\"token function\">App</span><span class=\"token punctuation\">(</span>recompose<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n   <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token interpolation variable\">$count</span>\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"Increment\"</span><span class=\"token punctuation\">;</span> it<span class=\"token punctuation\">.</span>onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token function\">recompose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"Reset\"</span><span class=\"token punctuation\">;</span> it<span class=\"token punctuation\">.</span>onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token function\">recompose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This doesn’t work because the variable <code class=\"language-text\">count</code> will get re-initialized to zero every time the function gets invoked.</p>\n<p>Note that this is remarkably similar to how the nodes used to get recreated every time the function was called, but we utilized positional memoization to fix that. It turns out that here we can do the exact same thing for local state!</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> State<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> value<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> Composer<span class=\"token punctuation\">.</span><span class=\"token function\">App</span><span class=\"token punctuation\">(</span>recompose<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> count <span class=\"token operator\">=</span> memo <span class=\"token punctuation\">{</span> <span class=\"token function\">State</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>count<span class=\"token punctuation\">.</span>value<span class=\"token delimiter variable\">}</span></span>\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"Increment\"</span><span class=\"token punctuation\">;</span> it<span class=\"token punctuation\">.</span>onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token function\">recompose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"Reset\"</span><span class=\"token punctuation\">;</span> it<span class=\"token punctuation\">.</span>onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token function\">recompose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now that we are using <code class=\"language-text\">memo</code>, the instance of <code class=\"language-text\">State</code> will be the same for every subsequent call of the function (but unique to its position in the UI tree). We can then mutate it and trigger a recomposition for the hierarchy so that the screen reflects the new value of the <code class=\"language-text\">State</code> instance.</p>\n<h1>The <code class=\"language-text\">@Composable</code> Annotation</h1>\n<p>OK, so we’ve gotten pretty far in being able to build our App’s UI using these <code class=\"language-text\">Composer</code> extension functions. That said, we’ve managed to really complicate just a basic UI in order to make this approach efficient and robust.</p>\n<p>Let’s imagine that we introduce an <code class=\"language-text\">@Composable</code> annotation which takes most of this complex boilerplate away. This annotation could have the following effects:</p>\n<ol>\n<li>It turns any calls to the <code class=\"language-text\">Node</code> constructor inside of the function into a corresponding <code class=\"language-text\">emit</code> call.</li>\n<li>it ensures that other functions marked with <code class=\"language-text\">@Composable</code> that are in the body of the function are surrounded by a group.</li>\n<li>It implies that the function receive an extra implicit <code class=\"language-text\">Composer</code> as a parameter, instead of requiring it be a Composer extension function. This is possible because the only code that used the <code class=\"language-text\">Composer</code> is now implicit because of (1) and (2).</li>\n<li>It means that it can <em>only</em> be invoked from within another <code class=\"language-text\">@Composable</code> function. This is required for (3) to work since we have to pass in the <code class=\"language-text\">Composer</code> object implicitly at the point of invocation.</li>\n</ol>\n<p>Given these effects, we can see that the above <code class=\"language-text\">App</code> function would turn into:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> State<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> value<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span>\n\n<span class=\"token annotation builtin\">@Composable</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span>recompose<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> count <span class=\"token operator\">=</span> memo <span class=\"token punctuation\">{</span> <span class=\"token function\">State</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>count<span class=\"token punctuation\">.</span>value<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"Increment\"</span><span class=\"token punctuation\">,</span> onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token function\">recompose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"Reset\"</span><span class=\"token punctuation\">,</span> onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token function\">recompose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Similarly, the <code class=\"language-text\">TodoApp</code> function from above could become:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">TodoItem</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> TodoItem<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[${if (item.completed) \"</span>x<span class=\"token string\">\" else \"</span> <span class=\"token string\">\"}] <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>item<span class=\"token punctuation\">.</span>title<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation builtin\">@Composable</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">TodoApp</span><span class=\"token punctuation\">(</span>items<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>TodoItem<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Box <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">TodoItem</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total: <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>items<span class=\"token punctuation\">.</span>size<span class=\"token delimiter variable\">}</span></span> items\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That cleans things up considerably.</p>\n<hr>\n<p>The above example suffers from the same problems that the memoizations of emits did before we introduced <code class=\"language-text\">group</code> calls around them. If we want to create state inside of control-flow logic, which we do, then we will need to do the same thing here.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> count <span class=\"token operator\">=</span> <span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> memo <span class=\"token punctuation\">{</span> <span class=\"token function\">State</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>This feels a bit tiresome to need to do this every time we want to introduce state, and it is also easy to forget and end up with incorrect code, so we have created a way of doing this that is less error-prone, that we call Effects.</p>\n<p>Effects are like bound composable function calls that are waiting to be “positionally called”, and the way you call them is with the <code class=\"language-text\">+</code> operator:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> State<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> value<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span>\n\n<span class=\"token annotation builtin\">@Composable</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span>recompose<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">val</span> count <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>memo <span class=\"token punctuation\">{</span> <span class=\"token function\">State</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n   <span class=\"token operator\">&lt;</span>Text text<span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>count<span class=\"token punctuation\">.</span>value<span class=\"token delimiter variable\">}</span></span>\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n   <span class=\"token operator\">&lt;</span>Button text<span class=\"token operator\">=</span><span class=\"token string\">\"Increment\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> count<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token function\">recompose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n   <span class=\"token operator\">&lt;</span>Button<span class=\"token punctuation\">;</span> text<span class=\"token operator\">=</span><span class=\"token string\">\"Reset\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> count<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token function\">recompose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">+</code> operator, similar to the KTX element syntax, takes care of wrapping the call with a group and a key that is unique to the location of the call in source.</p>\n<p>As we will see later, Effects can be combined with observable @Model objects to make state really easy to work with in Compose, and remove some syntactic overhead, as well as ensure that a <code class=\"language-text\">recompose</code> function isn’t needed. Thus, our example just becomes:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">var</span> count <span class=\"token keyword\">by</span> <span class=\"token operator\">+</span>state <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n\n   <span class=\"token operator\">&lt;</span>Text text<span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token interpolation variable\">$count</span>\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n   <span class=\"token operator\">&lt;</span>Button text<span class=\"token operator\">=</span><span class=\"token string\">\"Increment\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">++</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n   <span class=\"token operator\">&lt;</span>Button text<span class=\"token operator\">=</span><span class=\"token string\">\"Reset\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>This forms a solid mental model from which we can build on top of to understand Compose in greater detail. The example above can be mapped to Compose directly, although it does not address problems (2) and (3) above, which Compose does and is explained in more detail further into this document.</p>\n<p>To transition into the syntax of Compose, let’s perform the following transformations in our head:</p>\n<p>The <code class=\"language-text\">Composer</code> receiver parameter we defined in the functions above is actually an implicit context object that the Compose compiler passes around for you. The type of this object is inferred with the <code class=\"language-text\">@Composable</code> annotation\nThe calls to other @Composable functions are done with a special syntax\nThe calls to <code class=\"language-text\">emit</code> on the <code class=\"language-text\">Composer</code> object are also done with the same special syntax</p>\n<p>Using these mappings, the example above can be rewritten to be:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">TodoItem</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> TodoItem<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token operator\">&lt;</span>Text text<span class=\"token operator\">=</span><span class=\"token string\">\"[${if (item.completed) \"</span>x<span class=\"token string\">\" else \"</span> <span class=\"token string\">\"}] <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>item<span class=\"token punctuation\">.</span>title<span class=\"token delimiter variable\">}</span></span>\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation builtin\">@Composable</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">TodoApp</span><span class=\"token punctuation\">(</span>items<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>TodoItem<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token operator\">&lt;</span>Box<span class=\"token operator\">></span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token operator\">&lt;</span>TodoItem item <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Box<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// render UI</span>\n<span class=\"token function\">renderNodeToScreen</span><span class=\"token punctuation\">(</span>compose <span class=\"token punctuation\">{</span> <span class=\"token operator\">&lt;</span>TodoApp items <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>As we can see from this example, there is an intentional duality between “emitting” a Node with certain attributes into the Composer and “calling” a function with some parameters which may then “emit” something into the Composer.</p>\n<p>We will use this mental model as a basis for understanding Compose. Compose introduces a concept called “Positional Memoization” which is a solution to the problems (2) and (3) posed above. We will talk about it in more detail below, but we will first delve into a few more concepts in the meantime.</p>\n<p>This forms a good solution to (1) above, but (2) and (3) are not yet solved. These problems are solved with Compose with Positional Memoization, but is not readily addressed with this simplistic model.</p>\n<p>We are going to discuss a few other concepts before jumping into Positional Memoization though.</p>\n<hr>\n<p>As we can see here, there is quite a bit of ceremony around introducing new groups and keys manually for every single emit and call. Continuing the theme, the KTX element syntax also encompasses the creation of a group with a key. The key chosen is actually an integer that is computed from the unique position of the element in the source code. This is why we call it “Positional Memoization”: the memoization cache is keyed on the position of the element in source code, as well as the call graph. This means that, practically speaking, every element in the source code will have its own unique key that is part of its compilation. By using this position hash, we are able to leverage execution order for memoization while also allowing for conditional logic.</p>\n<p>With these groups incorporated into the syntax of a KTX element, we see that our example simplifies down into this:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">TodoApp</span><span class=\"token punctuation\">(</span>items<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>TodoItem<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token operator\">&lt;</span>Box<span class=\"token operator\">></span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token operator\">&lt;</span>TodoItem item <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Box<span class=\"token operator\">></span>\n   <span class=\"token operator\">&lt;</span>Text text<span class=\"token operator\">=</span><span class=\"token string\">\"Total: <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>items<span class=\"token punctuation\">.</span>size<span class=\"token delimiter variable\">}</span></span> items\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>todo: things this blog post doesn’t talk about…</p>\n<ul>\n<li>deferral/parallelization</li>\n<li>skipping to composables / purity / etc.</li>\n<li>constant folding</li>\n<li>observe scopes / recomposition / invalidation</li>\n<li>composable inference</li>\n<li>gap buffer slot table</li>\n</ul>",
      "fields": { "readingTime": { "text": "24 min read" } },
      "frontmatter": {
        "title": "Compose From First Principles",
        "date": "May 13, 2019"
      }
    }
  },
  "pageContext": {
    "slug": "/compose-from-first-principles/",
    "previous": {
      "fields": { "slug": "/one-concern-one-file/" },
      "frontmatter": { "title": "One Concern, One File" }
    },
    "next": {
      "fields": { "slug": "/content-on-declarative-ui/" },
      "frontmatter": { "title": "Content on Declarative UI" }
    }
  }
}
